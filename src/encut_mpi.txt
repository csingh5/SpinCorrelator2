///////////////////////////////////////////////////////////////////////////////
//                                                                           //
//                          *** main.cpp ***                                 //
//                                                                           //
///////////////////////////////////////////////////////////////////////////////


#include <iostream>
#include "Eigmesh.hpp"
#include "Mesh.hpp"
#include "W90.hpp"
#include "StaticMatrix.hpp"
#include "BareSusceptibility.hpp"
#include "mpi.h"

int main(int argc, char *argv[])
{
	
	int world_rank, world_size;
	MPI_Init(&argc, &argv);	
	MPI_Comm_size(MPI_COMM_WORLD, &world_size);
	MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

	BareSusceptibility X("data/input/reduced_klist");
	Mesh qmesh("data/input/reduced_qlist");
	Eigen::Vector3d q;
	Eigen::MatrixXcd temp;

	std::ofstream file("data/output/encut/omega" + std::to_string(world_rank + 1));

	for (int i = 0; i < qmesh.size(); ++i) {
		
		q = qmesh.point(i);

		if (q(0) == 0 && q(1) == 0 && q(2) == 0) continue;
	
		temp = X(q, world_rank + 1);

		file << std::scientific;
        file << q(0) << "\t" << q(1) << "\t";  
		file << temp.real().sum() << "\t" << temp.imag().sum() << "\t";
        file << temp.real().trace() << "\t" << temp.imag().trace() << "\n";

		if (world_rank == 0)
			std::cout << 100 * i / qmesh.size() << "%" << std::endl;

	}

	MPI_Finalize();
	


	return 0;
}
